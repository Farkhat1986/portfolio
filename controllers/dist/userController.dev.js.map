{"version":3,"sources":["userController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEI;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACA;AACA;AACC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACD;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAEA;AACA","sourcesContent":["//*import { ApiError } from \"../error/ApiError.js\";\r\n//*import bcrypt from 'bcrypt';\r\n//*import jwt from 'jsonwebtoken'\r\n//*import { User, Project } from '../model/model.js';\r\n//*import { config } from 'dotenv'\r\n\r\n//*config();\r\n//*const secret = process.env.SECRET_KEY;\r\n\r\n//*class UserController {\r\n    \r\n    /** Регистрация пользователя. */\r\n //*   async registration(req, res, next) {\r\n //*       const { email, password, role } = req.body;\r\n //*       if(!email || !password) {\r\n //*           return next(ApiError.badRequest('Некорректный email или пароль'))\r\n //*       }\r\n //*       const candidate = await User.findOne({ where: {email}})\r\n //*       if(candidate) {\r\n //*           return next(ApiError.badRequest(\"Пользователь с таким email уже существует\"))\r\n //*       }\r\n  //*      const hashPassword = await bcrypt.hash(password, 5)\r\n  //*      const user = await User.create({ email, role, password: hashPassword });\r\n  //*      const project = await Project.create({userId: user.id})\r\n   //*     const token = jwt.sign(\r\n  //*          {id: user.id, email: user.email, role: user.role }, \r\n  //*          secret, \r\n  //*          { expiresIn: '24h'}\r\n  //*      );\r\n  //*      return res.json({token})\r\n  //*  }\r\n\r\n    /** Аутентификация пользователя. */\r\n  //*  async login(req, res, next) {\r\n  //*      const { email, password } = req.body;\r\n  //*      const user = await User.findOne({ where: { email }})\r\n //*       if(!user) {\r\n  //*          return next(ApiError.badRequest(\"Пользователь не найден\"))\r\n  //*      }\r\n  //*      let comparePassword = bcrypt.compareSync(password, user.password)\r\n  //*      if(!comparePassword) {\r\n  //*          return next(ApiError.badRequest(\"Указан неверный пароль\"))\r\n  //*      }\r\n  //*      const token = jwt.sign(\r\n  //*          {id: user.id, email: user.email, role: user.role }, \r\n  //*          secret, \r\n  //*          { expiresIn: '24h'}\r\n  //*      );\r\n  //*      return res.json({token})\r\n  //*  }\r\n\r\n    /** Проверка пользователя. */\r\n  //*  async check(req, res, next) {\r\n  //*      const token = jwt.sign(\r\n  //*          {id: req.user.id, email: req.user.email, role: req.user.role }, \r\n  //*          secret, \r\n  //*          { expiresIn: '24h'}\r\n  //*      );\r\n  //*      return res.json({token})\r\n  //*  }\r\n//*}\r\n\r\n//*const userController = new UserController();\r\n//*export { userController };"],"file":"userController.dev.js"}